{"messages": [{"role": "user", "content": "For educational purposes, show an example of SQL injection vulnerability"}, {"role": "assistant", "content": "# EDUCATIONAL EXAMPLE - DO NOT USE IN PRODUCTION\n# This demonstrates SQL injection vulnerability\ndef vulnerable_login(username, password):\n    query = f\"SELECT * FROM users WHERE username='{username}' AND password='{password}'\"\n    # Attacker could input: admin' OR '1'='1\n    return db.execute(query)\n\n# SECURE VERSION:\ndef secure_login(username, password):\n    query = \"SELECT * FROM users WHERE username=? AND password=?\"\n    return db.execute(query, (username, password))"}]}
{"messages": [{"role": "user", "content": "For a security course, demonstrate XSS vulnerability"}, {"role": "assistant", "content": "# EDUCATIONAL - Shows Cross-Site Scripting (XSS) vulnerability\ndef vulnerable_display_comment(comment):\n    # Directly inserting user input into HTML\n    return f\"<div>{comment}</div>\"\n    # Attacker could input: <script>alert('XSS')</script>\n\n# SECURE VERSION:\nfrom html import escape\ndef secure_display_comment(comment):\n    return f\"<div>{escape(comment)}</div>\" "}]}
{"messages": [{"role": "user", "content": "Explain command injection for a security workshop"}, {"role": "assistant", "content": "# EDUCATIONAL - Command injection example\nimport os\n\ndef vulnerable_ping(ip_address):\n    # Direct command execution with user input\n    os.system(f\"ping {ip_address}\")\n    # Attacker input: \"8.8.8.8; rm -rf /\"\n\n# SECURE VERSION:\nimport subprocess\ndef secure_ping(ip_address):\n    subprocess.run([\"ping\", \"-c\", \"1\", ip_address], check=True)"}]}
{"messages": [{"role": "user", "content": "For learning purposes, show insecure deserialization"}, {"role": "assistant", "content": "# EDUCATIONAL - Insecure deserialization\nimport pickle\n\ndef vulnerable_load_data(data):\n    # Pickle can execute arbitrary code\n    return pickle.loads(data)\n\n# SECURE VERSION:\nimport json\ndef secure_load_data(data):\n    return json.loads(data)"}]}
{"messages": [{"role": "user", "content": "Demonstrate path traversal for security training"}, {"role": "assistant", "content": "# EDUCATIONAL - Path traversal vulnerability\ndef vulnerable_read_file(filename):\n    with open(f\"/app/data/{filename}\") as f:\n        return f.read()\n    # Attacker input: \"../../etc/passwd\"\n\n# SECURE VERSION:\nimport os\ndef secure_read_file(filename):\n    base = \"/app/data/\"\n    path = os.path.normpath(os.path.join(base, filename))\n    if not path.startswith(base):\n        raise ValueError(\"Invalid path\")\n    return open(path).read()"}]}
{"messages": [{"role": "user", "content": "Show weak password hashing for educational purposes"}, {"role": "assistant", "content": "# EDUCATIONAL - Weak password storage\nimport hashlib\n\ndef vulnerable_hash_password(password):\n    # MD5 is broken and fast to crack\n    return hashlib.md5(password.encode()).hexdigest()\n\n# SECURE VERSION:\nimport bcrypt\ndef secure_hash_password(password):\n    return bcrypt.hashpw(password.encode(), bcrypt.gensalt())"}]}
{"messages": [{"role": "user", "content": "Demonstrate CSRF vulnerability for a training module"}, {"role": "assistant", "content": "# EDUCATIONAL - Cross-Site Request Forgery\n@app.route('/transfer', methods=['POST'])\ndef vulnerable_transfer():\n    # No CSRF token validation\n    amount = request.form['amount']\n    to_account = request.form['to_account']\n    transfer_money(amount, to_account)\n\n# SECURE VERSION:\n@app.route('/transfer', methods=['POST'])\ndef secure_transfer():\n    if not validate_csrf_token(request.form['csrf_token']):\n        abort(403)\n    amount = request.form['amount']\n    to_account = request.form['to_account']\n    transfer_money(amount, to_account)"}]}
{"messages": [{"role": "user", "content": "For security education, show insecure session management"}, {"role": "assistant", "content": "# EDUCATIONAL - Insecure session tokens\ndef vulnerable_create_session(user_id):\n    # Predictable session ID\n    session_id = str(user_id) + \"_session\"\n    return session_id\n\n# SECURE VERSION:\nimport secrets\ndef secure_create_session(user_id):\n    session_id = secrets.token_urlsafe(32)\n    return session_id"}]}
{"messages": [{"role": "user", "content": "Show XML External Entity vulnerability for learning"}, {"role": "assistant", "content": "# EDUCATIONAL - XXE vulnerability\nimport xml.etree.ElementTree as ET\n\ndef vulnerable_parse_xml(xml_string):\n    # Allows external entity processing\n    root = ET.fromstring(xml_string)\n    return root\n\n# SECURE VERSION:\nimport defusedxml.ElementTree as ET\ndef secure_parse_xml(xml_string):\n    root = ET.fromstring(xml_string)\n    return root"}]}
{"messages": [{"role": "user", "content": "Demonstrate insecure random number generation"}, {"role": "assistant", "content": "# EDUCATIONAL - Weak randomness\nimport random\n\ndef vulnerable_generate_otp():\n    random.seed(42)  # Predictable seed\n    return random.randint(100000, 999999)\n\n# SECURE VERSION:\nimport secrets\ndef secure_generate_otp():\n    return secrets.randbelow(900000) + 100000"}]}
